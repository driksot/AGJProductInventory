@page "/product/new"
@page "/product/edit/{id:int}"
@inject IProductService _productService
@inject ICategoryService _categoryService
@inject NavigationManager _navigation
@inject ISnackbar Snackbar
@inject HttpClient _http
@inject IFileUploadService _fileUpload


<MudText Typo="Typo.h4" Class="card-title fw-bold mb-4" Color="Color.Primary">@($"{Title} Product".ToUpper())</MudText>

<EditForm Model="Product" OnValidSubmit="HandleValidSubmit">
    <MudGrid>
        <MudItem xs="9">
            <MudCard>
                <MudCardContent>
                    <MudTextField @bind-Value="Product.Name" Label="Name" Variant="Variant.Outlined" Class="mb-4" />
                    <MudTextField @bind-Value="Product.Description" Label="Description" Variant="Variant.Outlined" Lines="8" Class="mb-4" />
                    <MudSelect T="int" @bind-Value="Product.CategoryId" Label="Category" Variant="Variant.Outlined">
                        @foreach (var category in Categories)
                        {
                            <MudSelectItem Value="@category.Id">@category.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudCardContent>
                <MudCardActions Class="ms-2 pb-2">
                    <MudButton Variant="Variant.Filled"
                               StartIcon="@Icons.Material.Filled.Save"
                               Color="Color.Primary"
                               ButtonType="MudBlazor.ButtonType.Submit">
                        Save
                    </MudButton>
                    <MudButton Variant="Variant.Filled"
                               StartIcon="@Icons.Material.Filled.ArrowBack"
                               Color="Color.Secondary"
                               Class="ms-2"
                               Href="/product">
                        Back
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="3">
            <MudCard>
                <MudCardContent Class="d-flex justify-content-center" Style="flex-direction:column">
                    <InputFile id="uploadPhoto" OnChange="HandleImageUpload" hidden accept=".jpg, .jpeg, .png" />

                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Filled.CloudUpload"
                               Class="mb-4"
                               for="uploadPhoto">
                        Upload Photo
                    </MudButton>
                    <MudContainer>
                        @if (_attemptingToUploadImage == true)
                        {
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                        }
                        else if (_attemptToUploadFailed)
                        {
                            <MudAlert Severity="Severity.Error">Failed to upload image. @_reasonImageUploadFailed</MudAlert>
                        }
                        else
                        {
                            <img src="@($"{APIEndpoints.ServerBaseUrl}/{Product.ImageUrl}")" style="width:100%;" />
                        }
                    </MudContainer>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    private ProductViewModel Product { get; set; } = new ProductViewModel();
    private IEnumerable<CategoryViewModel> Categories { get; set; } = new List<CategoryViewModel>();
    private string Title { get; set; } = "Add";
    public bool IsLoading { get; set; }
    public string OldImageUrl { get; set; }
    List<FileData> fileDataList = new List<FileData>();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProduct();
        }
    }

    private async Task LoadProduct()
    {
        IsLoading = true;
        StateHasChanged();
        Categories = await _categoryService.GetAll();
        if (Id != 0)
        {
            // update
            Title = "Update";
            Product = await _productService.Get(Id);
            OldImageUrl = Product.ImageUrl;
        }

        Product.ImageUrl = "images/product/placeholder.png";
        IsLoading = false;
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        if (Product.Id == 0)
        {
            // Create Product
            HttpResponseMessage response = await _productService.AddProduct(Product);
        }
        else
        {
            // Update Product
            if (OldImageUrl != Product.ImageUrl)
            {
                // upload file
            }

            await _productService.Update(Product);
        }

        //await SaveToServer();

        _navigation.NavigateTo("product");
    }

    private bool _attemptingToUploadImage = false;
    private bool _attemptToUploadFailed = false;
    private string _reasonImageUploadFailed = null;

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        _attemptingToUploadImage = true;

        if (e.File.ContentType != "image/jpeg" && e.File.ContentType != "image/png")
        {
            _reasonImageUploadFailed = "Please only upload JPEG, JPG, or PNG images.";
            _attemptToUploadFailed = true;
        }
        else if (e.File.Size >= 31457280) // 31457280 bytes = 30 megabytes
        {
            _reasonImageUploadFailed = "Please only upload images that are smaller than 30 MegaBytes (MB).";
            _attemptToUploadFailed = true;
        }
        else
        {
            IBrowserFile uploadedImageFile = e.File;

            byte[] imageAsByteArray = new byte[uploadedImageFile.Size];

            await uploadedImageFile.OpenReadStream(31457280).ReadAsync(imageAsByteArray);
            string byteString = Convert.ToBase64String(imageAsByteArray);

            UploadedImage uploadedImage = new UploadedImage()
			{
				NewImageFileExtension = uploadedImageFile.Name.Substring(uploadedImageFile.Name.Length - 4),
				NewImageBase64Content = byteString,
				OldImagePath = string.Empty
			};

            HttpResponseMessage response = await _fileUpload.UploadFile(uploadedImage);

            if (response.StatusCode == System.Net.HttpStatusCode.Created)
            {
                Product.ImageUrl = await response.Content.ReadAsStringAsync();
            }
            else
            {
                _reasonImageUploadFailed = $"Something went wrong when making a request to the server. Server response code: {response.StatusCode}. Server reason: {response.ReasonPhrase}.";
                _attemptToUploadFailed = true;
            }

            _attemptingToUploadImage = false;
		    StateHasChanged();
        }
    }

    //private async Task OnFileSelection(InputFileChangeEventArgs e)
    //{
    //    IBrowserFile imgFile = e.File;
    //    var buffers = new byte[imgFile.Size];
    //    await imgFile.OpenReadStream().ReadAsync(buffers);
    //    string imageType = imgFile.ContentType;
    //    Product.ImageUrl =$"data:{imageType};base64,{Convert.ToBase64String(buffers)}";
    //    fileDataList.Add(new FileData
    //    {
    //        Data = buffers,
    //        FileType = imageType,
    //        Size = imgFile.Size
    //    });
    //}

    //private async Task SaveToServer()
    //{
    //    if (fileDataList.Count > 0)
    //    {
    //        var payload = new SaveFile { Files = fileDataList };
    //        await _fileUpload.UploadFile(payload);
    //    }
    //}
}
