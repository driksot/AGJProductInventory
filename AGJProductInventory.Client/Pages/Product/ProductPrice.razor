@page "/product/price/{id:int}"
@inject IProductService _productService
@inject IProductVariationService _productVariationService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudText Typo="Typo.h4" Class="card-title fw-bold mb-4" Color="Color.Primary">@("Product Price Management".ToUpper())</MudText>

@if (_isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudPaper Class="my-8">
        <MudGrid Class="px-4">
            <MudItem xs="10">
                <MudText Class="pb-2" Typo="Typo.h4">@_product.Name.ToUpper()</MudText>
                <MudText>Category : @_product.Category.Name</MudText> <br />
                <MudText>Description : @_product.Description</MudText>
            </MudItem>
            <MudItem xs="2">

                <MudImage Src="@($"{APIEndpoints.ServerBaseUrl}/{_product.ImageUrl}")" style="width:100%;" Alt="Product Image" Elevation="25" />

            </MudItem>
        </MudGrid>
    </MudPaper>


    <MudTable Items="_productVariations" Striped="true" Hover="true" Dense="true" CanCancelEdit="true" Filter="new Func<ProductVariationDTO, bool>(FilterFunc)"
          @bind-SelectedItem="selectedItem1" SortLabel="Sort By" CommitEditTooltip="Commit Edit"
          OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted">
        <ToolBarContent>
            <MudButton @onclick="@(() => OpenDialog(_product.Id))" DisableElevation Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface">New Size</MudButton>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<ProductVariationDTO, object>(x=>x.Size)">Size</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ProductVariationDTO, object>(x=>x.Price)">Price</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Size">@context.Size</MudTd>
            <MudTd DataLabel="Price">@context.Price</MudTd>
        </RowTemplate>
        <RowEditingTemplate>
            <MudTd DataLabel="Size">
                <MudTextField @bind-Value="@context.Size" Required />
            </MudTd>
            <MudTd DataLabel="Price">
                <MudNumericField @bind-Value="@context.Price" Required Min="0.1" Format="N2" />
            </MudTd>
        </RowEditingTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private ProductDTO _product { get; set; } = new ProductDTO();

    private List<string> editEvents = new();
    private string searchString = "";
    private ProductVariationDTO selectedItem1 = new();
    private ProductVariationDTO elementBeforeEdit = new();
    private HashSet<ProductVariationDTO> selectedItems1 = new HashSet<ProductVariationDTO>();

    private IEnumerable<ProductVariationDTO> _productVariations { get; set; } = new List<ProductVariationDTO>();
    private bool _isLoading { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isLoading = true;
            StateHasChanged();
            _product = await _productService.Get(Id);
            await LoadVaration();
        }
    }

    private async Task LoadVaration()
    {
        _productVariations = await _productVariationService.GetAll(Id);
        _isLoading = false;
        StateHasChanged();
    }

    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object variation)
    {
        elementBeforeEdit = new()
            {
                Size = ((ProductVariationDTO)variation).Size,
                Price = ((ProductVariationDTO)variation).Price
            };
        AddEditionEvent($"RowEditPreview event: made a backup of Element {((ProductVariationDTO)variation).Size}");
    }

    private void ItemHasBeenCommitted(object variation)
    {
        AddEditionEvent($"RowEditCommit event: Changes to Element {((ProductVariationDTO)variation).Size} committed");
    }

    private void ResetItemToOriginalValues(object variation)
    {
        ((ProductVariationDTO)variation).Size = elementBeforeEdit.Size;
        ((ProductVariationDTO)variation).Price = elementBeforeEdit.Price;
        AddEditionEvent($"RowEditCancel event: Editing of Element {((ProductVariationDTO)variation).Size} cancelled");
    }

    private bool FilterFunc(ProductVariationDTO variation)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (variation.Size.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (variation.Price.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{variation.Size} {variation.Price.ToString()}".Contains(searchString))
            return true;
        return false;
    }

    private async Task OpenDialog(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("Id", id);
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };

        var dialog = DialogService.Show<AddProductVariationModal>("Add", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await LoadVaration();
        }
    }
}